{
  "service": {
    "service": "CirclTask",
    "serviceObject": {
      "name": "CirclTask"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource": "arn:aws:s3:::circltask-s3-bucket-dev/*"
            }
          ]
        }
      },
      "region": "us-east-1",
      "environment": {
        "S3_BUCKET_NAME": "circltask-s3-bucket-dev"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "UploadCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/CirclTask-dev-uploadCustomer"
            }
          },
          "GetCustomersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/CirclTask-dev-getCustomers"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "CirclTask",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CirclTask-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CirclTask-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "CirclTask",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "UploadCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-0ac85a8a-5e23",
                "S3Key": "serverless/CirclTask/dev/1732477599182-2024-11-24T19:46:39.182Z/CirclTask.zip"
              },
              "Handler": "CirclTask/handler.uploadCustomer",
              "Runtime": "python3.12",
              "FunctionName": "CirclTask-dev-uploadCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET_NAME": "circltask-s3-bucket-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadCustomerLogGroup"
            ]
          },
          "GetCustomersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-0ac85a8a-5e23",
                "S3Key": "serverless/CirclTask/dev/1732477599182-2024-11-24T19:46:39.182Z/CirclTask.zip"
              },
              "Handler": "CirclTask/handler.getCustomers",
              "Runtime": "python3.12",
              "FunctionName": "CirclTask-dev-getCustomers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "S3_BUCKET_NAME": "circltask-s3-bucket-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCustomersLogGroup"
            ]
          },
          "UploadCustomerLambdaVersion6VKHdnRHJQj6R6omqfxzjnSSvTqosismCaAvNTaRo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadCustomerLambdaFunction"
              },
              "CodeSha256": "UcpOKZxzgd/mFXQwI8xu5Wp+Xn8iLiOVfBodeuxr3Ds="
            }
          },
          "GetCustomersLambdaVersionUYmHzPCHdNWdNrk0hVIIHMVzMlRKXTZDsJkzD0ndI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCustomersLambdaFunction"
              },
              "CodeSha256": "UcpOKZxzgd/mFXQwI8xu5Wp+Xn8iLiOVfBodeuxr3Ds="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-CirclTask",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "UploadCustomerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadCustomer": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UploadCustomerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUploadcustomer": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /uploadCustomer",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadCustomer"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadCustomer"
          },
          "GetCustomersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCustomersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCustomers": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCustomersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetcustomers": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getCustomers",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCustomers"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCustomers"
          },
          "CustomerS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "circltask-s3-bucket-dev",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-0ac85a8a-5e23",
            "Export": {
              "Name": "sls-CirclTask-dev-ServerlessDeploymentBucketName"
            }
          },
          "UploadCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadCustomerLambdaVersion6VKHdnRHJQj6R6omqfxzjnSSvTqosismCaAvNTaRo"
            },
            "Export": {
              "Name": "sls-CirclTask-dev-UploadCustomerLambdaFunctionQualifiedArn"
            }
          },
          "GetCustomersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCustomersLambdaVersionUYmHzPCHdNWdNrk0hVIIHMVzMlRKXTZDsJkzD0ndI"
            },
            "Export": {
              "Name": "sls-CirclTask-dev-GetCustomersLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-CirclTask-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-CirclTask-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "uploadCustomer": {
        "handler": "CirclTask/handler.uploadCustomer",
        "events": [
          {
            "httpApi": {
              "path": "/uploadCustomer",
              "method": "post",
              "cors": true
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/uploadCustomer"
          }
        ],
        "name": "CirclTask-dev-uploadCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "UploadCustomerLambdaVersion6VKHdnRHJQj6R6omqfxzjnSSvTqosismCaAvNTaRo"
      },
      "getCustomers": {
        "handler": "CirclTask/handler.getCustomers",
        "events": [
          {
            "httpApi": {
              "path": "/getCustomers",
              "method": "get",
              "cors": true
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/getCustomers"
          }
        ],
        "name": "CirclTask-dev-getCustomers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "GetCustomersLambdaVersionUYmHzPCHdNWdNrk0hVIIHMVzMlRKXTZDsJkzD0ndI"
      }
    },
    "resources": {
      "Resources": {
        "CustomerS3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "circltask-s3-bucket-dev",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "labibahtrd",
      "app": "task1",
      "service": "CirclTask",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "task1",
    "appId": null,
    "org": "labibahtrd",
    "orgId": null,
    "layers": {},
    "artifact": "/Users/ahmedalnemer/Desktop/Work stuff/curcile assessment/.serverless/CirclTask.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/CirclTask/dev/1732477599182-2024-11-24T19:46:39.182Z",
    "artifact": "CirclTask.zip"
  }
}